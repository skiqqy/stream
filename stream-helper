#!/bin/bash
# Written by skiqqy
# Usage: stream-helper -h
# Purpose: Uses dmenu to ineract and control a stream instance.

socket=/tmp/mpvsoc
deps=( jq dmenu socat ss ) # List of dependencies needed by stream-helper
commands=( pp svol ) # Available commands in tui/gui mode. DO NOT CHANGE, names cannot have spaces.
version=beta-1.0v

usage ()
{
	cat << EOF
Stream-Helper $version ~ The simple stream helper utility

Usage: stream-helper [options] [pid]

options
-------

-h    Shows this message.
-s    Specify the socket to use.
-d    See the dependencies needed for full functionality (prints a message if one is missing).
-t    Force tty mode.
-c    List the commands and what they do.

Written by skiqqy
EOF
	exit "$1"
}

# Prints information on commands.
# Usage help [command]
# If no command is given, print all commands.
help ()
{
	if [ -n "$1" ]
	then
		print_command "$1"
		return
	fi

	for c in ${commands[*]}
	do
		print_command "$c"
	done
}

print_command ()
{
		case "$1" in
			pp)
				echo -e "$1"': Pause/Play current stream instance.\n\t- Usage: pp [time]'
				;;
			svol)
				echo -e "$1"': Adjust stream instance volume.\n\t- Usage: svol [(+|-) [amount]] [set to]'
				;;
			*)
				echo -e "$1: Description $1 not yet implemented."
				;;
		esac
}

# Prints the volume of stream instance
getvol () {
	echo '{ "command": ["get_property", "volume"] }' | socat - "$socket" | jq .data
}

# Control/Set the volume by an (optional) amount, or by 2 if none given.
# Usage: svol [(+|-) [amount]] [set to]
svol ()
{
	if [ "$#" -eq 0 ]
	then
		vol=50 # No commands -> set volume to 50%
	fi

	case "$1" in
		+)
			opp=+
			;;
		-)
			opp=-
			;;
		*)
			if [ -z "$3" ] && [ ! "$#" -eq 0 ]
			then
				echo "Empty first argument requires non empty third arg."
				return 1 # Check valid first argument
			fi
			;;
	esac
	[ -z "$2" ] && inc=2 || inc="$2"

	ovol=$(getvol)
	if [ -z "$3" ] && [ ! "$#" -eq 0 ]
	then
		vol=$(("$ovol" "$opp" "$inc")) # Calculate the volume change.
	elif [ -n "$3" ]
	then
		vol="$3"
	fi

	if [[ "$vol" -gt 100 ]] || [[ $vol -lt 0 ]]
	then
		echo "$vol is an invalid volume value"
		return 1
	fi

	echo '{ "command": ["set_property", "volume", '"$vol"'] }' | socat - "$socket" > /dev/null
	echo "[VOLUME] $ovol changed to $vol"
}

# Pause/Play the current stream instance (for an optional time)
# Usage: pp [time]
pp ()
{
	echo 'cycle pause' | socat - "$socket"
	if [[ "$1" =~ ^[0-9]+$ ]]
	then
		sleep "$1"
		echo 'cycle pause' | socat - "$socket"
	fi
}

# This is just for testing
debug ()
{
	svol + 10
	svol - 10
	svol - - 50
	pp # Testing hard pause, no time given
	sleep 1 # Stream should pause for 1 second
	pp
	sleep 3 # Play for 3 second
	pp 2 # Sleep for 2 seconds
}

# Run a command, acts as a little safety net to prevent nasty stuff
# Usage: run "command <command flags>"
run ()
{
	case "$1" in
		pp*|svol*|help*) # User can type pp "flags" directly
			$1 # I want splitting
			;;
		*)
			echo "Invalid command"
			return 1
			;;
	esac
}

# Gui eventloop that does gui things using dmenu
gui ()
{
	coms="${commands[*]}"
	input=$(echo -e "${coms// /\\n}" | dmenu -l ${#commands[*]} -p 'Enter Command:') # Get input

	run "$input"
}

# Basically just a subshell of this shell lol
tty ()
{
	if read -rp ">>> " input
	then
		run "$input"
	else
		return 2
	fi
}

# Assert that dependecies are met. And print what they are needed for, shows a
# warning if a dependecy is missing.
check_deps ()
{
	missing=0

	for d in ${deps[*]}
	do
		if ! command -v "$d"
		then
			missing=1
			echo "[WARNING] $d is missing."
		fi
		# Explain what it is needed for.
		case "$d" in
			dmenu)
				msg='Used to draw the gui, this is optional, if you dont have it installed you can just use tty mode.'
				;;
			socat)
				msg='Used to communicate with the socket, hard dependency.'
				;;
			ss)
				msg='Used to check that the socket exists and is open, semi-optional.'
				;;
			jq)
				msg='Used to parse the json returned by mpv. Mandatory.'
				;;
			*)
				msg='Description for this dependency not given.'
				;;
		esac
		echo -e "\t- $msg"
	done

	return "$missing"
}

main ()
{
	# Vars
	opts="hs:dtc"
	tty=false

	while getopts "$opts" opt
	do
		case "$opt" in
			h)
				usage 0
				;;
			s)
				socket="$OPTARG"
				;;
			d)
				check_deps
				exit
				;;
			t)
				tty=true
				;;
			c)
				help # I dont pass commands on purpose
				exit 0
				;;
			*)
				usage 1
				;;
		esac
	done

	if ! ss -l | grep "$socket" > /dev/null
	then
		echo "Socket '$socket' not found! Exiting."
		exit 1
	fi

	if "$tty"
	then
		echo -e "stream-helper $version\nType \"help\" or \"help <command>\" for help"
		for ((;;))
		do
			tty
			if [ "$?" -eq 2 ] # 2 means exit
			then
				break
			fi
		done
	else
		gui
	fi
}

main "$@"
