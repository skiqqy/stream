#!/bin/bash
# Written by skiqqy
# Usage: stream -h

# When talking about 'folders' in the script I am refering to simple files that
# hold links/paths to vdeos, be it on disk or on the internet, see the README

args=( $@ ) # I want splitting
deps=( youtube-dl mpv dmenu ) # List of dependencies needed by stream
version=beta-1.0v
#socket=/tmp/mpvsoc
socket=
v=
url='https://www.youtube.com/watch?v=5qap5aO4i9A' # By default we play lofi

usage ()
{
	cat << EOF
Stream $version ~ The simple stream utility

Usage: stream [options] [url]

options
-------

-h    Shows this message.
-s    Specify the socket to use (also enables usage of stream-helper).
-a    Enable the usage of a socket (default /tmp/mpvsoc)
-d    See the dependencies needed for full functionality.
-v    Disable Video (only play audio).
-f    Load and use the folders to select a video from dmenu.

Written by skiqqy
EOF
	exit "$1"
}

# Play a stream
# Usage play "$url"
play ()
{
	echo "Stream instance ID: $$"
	#mpv --ytdl-raw-options=force-ipv4= "$1" "$v" --input-ipc-server="$socket"
	mpv --ytdl-raw-options=force-ipv4= "$1" "$v" "$socket"
}

# Parse a folder, and set map to its contents
# Usage: parse_folder "path"
parse_folder ()
{
	unset map # Clear the map
	declare -gA map
	while read -r title link
	do
		if [[ "$link" =~ ^https://(www\.)?twitch\.tv ]]
		then
			# TODO Check if streamer is conline
			echo "TODO: Setup api keys_config stuff and check if streamer is online. -> https://dev.twitch.tv/docs/api/"
			streamer=$(basename "$link")
		fi
		map["$title"]="$link"
		entry=true
	done < "$1"
}

# List the contents of map
# Usage: dmenu_list
dmenu_list ()
{
	keys="${!map[*]}"
	tmp=( "$keys" )
	echo -e "${keys// /\\n}" | dmenu -l "${#tmp}"
}

main ()
{
	opts="hs:dvfa"
	config=false
	main=
	config="$HOME"/.config/stream # Where the configs and folders are kept

	# Set url if needed, to do this we must parse the arguments to ensure we dont eat up an OPTARG
	if [ "$#" -eq 1 ]
	then
		arg="${args[0]}"
		if  [ ! "${arg::1}" = - ]
		then
			url="$arg"
		fi
	elif [ "$#" -ge 2 ]
	then
		# Check last two arguments to ensure last arg is not an OPTARG
		argl="${args[$(($# - 1))]}"
		argsl="${args[$(($# - 2))]}"
		if  [ ! "${argl::1}" = - ]
		then
			if  [ ! "${argsl::1}" = - ] # Always take the very last argument as the url.
			then
				url="$argl"
			else
				# Check that second last arg is not a flag that takes an argument.
				argsl=${argsl:1:2}
				type=$(echo "$opts" | grep -Eo "$argsl.")
				type=${type:1:2}
				if [ ! "$type" = ":" ]
				then
					# Last arg is not an opt arg, hurray!
					url="$argl"
				fi
			fi
		fi
	fi

	while getopts "$opts" opt
	do
		case "$opt" in
			h)
				usage 0
				;;
			s)
				#socket="$OPTARG"
				# TODO: Check that it is unique
				echo Socket Enabled!
				socket="--input-ipc-server=/tmp/$OPTARG"
				;;
			a)
				echo Socket Enabled!
				socket='--input-ipc-server=/tmp/mpvsoc'
				;;
			d)
				echo "Dependencies: ${deps[*]}"
				exit 0
				;;
			v)
				echo "Enabling video"
				v=--no-video
				;;
			f) # TODO: Make it so a user can choose perhaps?
				main="$HOME"/.config/stream/root
				;;
			*)
				usage 1
				;;
		esac
	done

	# Read input from the config, each line must be of the form: <title>" "<url/filepath>
	mkdir -p "$config"
	[ -n "$main" ] && touch "$main"
	entry=false

	if [ -n "$main" ]
	then
		parse_folder "$main"

		# Find all folders in config.
		shopt -s nullglob
		for f in "$HOME"/.config/stream/*
		do
			name=$(basename "$f")
			if [[ ! "$name" =~ ^config|^root$ ]] # Check that the file is not a config (e.g config or config_twitch) and not the root folder
			then
				map["Folder:$name"]="$f" # Link the folder to its file
			fi
		done
	fi

	if "$entry" && [ -n "$main" ]
	then
		if input=$(dmenu_list)
		then
			echo "Selected $input"
			if [ "$(echo "$input" | cut -d: -f 1)" = Folder ]
			then
				# Note that we do not allow sub-folders
				folder=$(echo "$input" | cut -d: -f 2)
				parse_folder "$config/$folder"
				if input=$(dmenu_list)
				then
					play "${map[$input]}"
				fi
			else
				play "${map[$input]}" # Just a link to a video
			fi
		fi
	else
		play "$url"
	fi
}

main "$@"
