#!/bin/bash
# Written by skiqqy
# Usage: stream -h

args=( $@ ) # I want splitting
deps=( youtube-dl mpv ) # List of dependencies needed by stream
version=beta-1.0v
socket=/tmp/mpvsoc
v=--no-video
url='https://www.youtube.com/watch?v=5qap5aO4i9A' # By default we play lofi

usage ()
{
	cat << EOF
Stream $version ~ The simple stream utility

Usage: stream [options] [url]

options
-------

-h    Shows this message.

Written by skiqqy
EOF
	exit "$1"
}

# Play a stream
# Usage play "$url"
play ()
{
	mpv --ytdl-raw-options=force-ipv4= "$1" "$v" --input-ipc-server="$socket"
}

main ()
{
	opts="hs:dv"

	# Set url if needed, to do this we must parse the arguments to ensure we dont eat up an OPTARG
	if [ "$#" -eq 1 ]
	then
		arg="${args[0]}"
		if  [ ! "${arg::1}" = - ]
		then
			url="$arg"
		fi
	elif [ "$#" -ge 2 ]
	then
		# Check last two arguments to ensure last arg is not an OPTARG
		argl="${args[$(($# - 1))]}"
		argsl="${args[$(($# - 2))]}"
		if  [ ! "${argl::1}" = - ]
		then
			if  [ ! "${argsl::1}" = - ] # Always take the very last argument as the url.
			then
				url="$argl"
			else
				# Check that second last arg is not a flag that takes an argument.
				argsl=${argsl:1:2}
				type=$(echo "$opts" | grep -Eo "$argsl.")
				type=${type:1:2}
				if [ ! "$type" = ":" ]
				then
					# Last arg is not an opt arg, hurray!
					url="$argl"
				fi
			fi
		fi
	fi

	while getopts "$opts" opt
	do
		case "$opt" in
			h)
				usage 0
				;;
			s)
				socket="$OPTARG"
				;;
			d)
				echo "Dependencies: ${deps[*]}"
				exit 0
				;;
			v)
				echo "Enabling video"
				v=
				;;
			*)
				usage 1
				;;
		esac
	done

	echo "Stream instance ID: $$"
	play "$url" # Just for now.
}

main "$@"
